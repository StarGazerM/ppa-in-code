// WHILE language specification in datalog
// preprocess of facts
// NOTE: in datalog we must make sure our facts are ture!

// Yihao Sun <ysun67@syr.edu>
// Syracuse 2020

/////////////////////////////// Facts ////////////////////////////////////

// in datalog in order to discriminate different facts in relational, we need a id for expression
.decl Var(id: number, name: symbol)
.input Var(IO=file, delimiter=",")

.decl Num(id: number, val: symbol)
.input Num(IO=file, delimiter=",")

.decl Bool(id: number, val: symbol)
.input Bool(IO=file, delimiter=",")

// aexpr struture(aexpr which is only aexpr), all op-a here is just binary
// assume facts are always well-formed (`op` is op-a, left/right are aexpr)
.decl AExprStruct(id: number, op: symbol, leftId: number, rightId: number)
.input AExprStruct(IO=file, delimiter=",")

// similar to AExprStruct
.decl BExprStruct(id: number, op: symbol, leftId: number, rightId: number)
.input BExprStruct(IO=file, delimiter=",")

// relation
.decl RExprStruct(id: number, op: symbol, leftId: number, rightId: number)
.input RExprStruct(IO=file, delimiter=",")

.decl Assign(label: number, var: number, aexprId: number)
.input Assign(IO=file, delimiter=",")

.decl Skip(label: number)
.input Skip(IO=file, delimiter=",")

// if next is -1 means end
.decl Seq(id: number, prev: number, next: number)
.input Seq(IO=file, delimiter=",")

.decl If(id: number, eguardId: number, etrueId: number, efalseId: number)
.input If(IO=file, delimiter=",")

.decl While(id: number, eguardId: number, ebodyId: number)
.input While(IO=file, delimiter=",")

// just in intra-procedure
// first level Stmt*
.decl FirstStmt(label: number)
.input FirstStmt(IO=file, delimiter=",")

// top level stmt
.decl LastStmt(label: number)
.input LastStmt(IO=file, delimiter=",")

////////////////////// extend with procedure //////////////////////
.decl Program(id: number, defs: number, stmt: number)
.input Program(IO=file, delimiter=",")

// similar to Seq if rest is -1 means last
// arg are variable
.decl ArgList(id: number, arg: number, rest: number)
.input ArgList(IO=file, delimiter=",")

// similar to Seq if rest is -1 means last
.decl ProcList(id: number, proc: number, rest: number)
.input ProcList(IO=file, delimiter=",")

// I directly use ln,lx for index 
.decl ProcDecl(ln: number, pname: symbol, args: number, res: number, body: number)
.input ProcDecl(IO=file, delimiter=",")

.decl ProcBody(lx: number, stmt: number)
.input ProcBody(IO=file, delimiter=",")

// here is how flatten sucks, but maybe will be similar to parser rule
// for convience I inline this rule
// .decl Param(id: number, expr: number)
// .input Param(IO=file, delimiter=",")

.decl ParamList(id: number, param: number, rest: number)
.input ParamList(IO=file, delimiter=",")

// arg are value, maybe here is some type like thing can be interesting
.decl Call(id: number, lc: number, lr: number, pname: symbol, parms: number, res: number)
.input Call(IO=file, delimiter=",")
 


//////////////////////////// rules ///////////////////////////////////////////

// AExpr having id "a" is a AExpr inside of block having Id "b"
// .decl AExprIn(a: number, b: number)
// .output AExprIn
// AExprIn(id, id) :- AExprStruct(id, _, _, _).
// AExprIn(rightId, id) :- RExprStruct(id, _, leftId, rightId), AExprStruct(leftId, _, _, _).
// AExprIn(leftId, id) :- RExprStruct(id, _, leftId, rightId), AExprStruct(rightId, _, _, _).
// AExprIn(aid, id) :- Assign(id, _, aid).
// AExprIn(a, c) :- AExprIn(a, b), AExprIn(b, c).

// "x" is a free var inside expression with id "eid"
// intra-procedure.... so this just means all var
.decl FreeIn(x: symbol, eid: number)
// .output FreeIn
FreeIn(x, eid) :- Var(eid, x).
FreeIn(x, eid) :- AExprStruct(eid, _, left, _), FreeIn(x, left).
FreeIn(x, eid) :- AExprStruct(eid, _, _, right), FreeIn(x, right).
FreeIn(x, eid) :- BExprStruct(eid, _, left, right), (FreeIn(x, left) ; FreeIn(x, right)).
FreeIn(x, eid) :- RExprStruct(eid, _, left, right), (FreeIn(x, left) ; FreeIn(x, right)).
FreeIn(x, eid) :- Assign(eid, _, aexprId), FreeIn(x, aexprId).
FreeIn(x, eid) :- Assign(eid, vid, _), Var(vid, x).
FreeIn(x, eid) :- Seq(eid, prev, _), FreeIn(x, prev).
FreeIn(x, eid) :- Seq(eid, _, next), next!=-1, FreeIn(x, next).
FreeIn(x, eid) :- If(eid, eguard, etrue, eflase), 
                  (FreeIn(x, eguard) ; FreeIn(x, etrue) ; FreeIn(x, efalse)).
FreeIn(x, eid) :- While(eid, eguard, ebody), (FreeIn(x, eguard) ; FreeIn(x, ebody)).
FreeIn(x, eid) :- ProcBody(eid, stmt), FreeIn(x, stmt).
FreeIn(x, eid) :- Call(eid, _, _, _, params, res), (FreeIn(x, res) ; FreeIn(x, params)).
FreeIn(x, eid) :- ParamList(eid, param, rest), (FreeIn(x, param) ; FreeIn(x, rest)).

// // all blocks in program
// .decl Label(id: number)
// .output Label
// Label(id) :- Assign(id, _, _).
// Label(id) :- Skip(id).
// Label(id) :- AExprStruct(id, _, _, _).
// Label(id) :- RExprStruct(id, _, _, _).
// Label(id) :- BExprStruct(id, _, _, _).
